set nocompatible
filetype off
set rtp+=~/vimfiles/bundle/Vundle.vim
" set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'L9'
Plugin 'a.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'ervandew/supertab'
" Plugin 'fuzzyfinder'
" Plugin 'Shougo/neocomplete.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'davidhalter/jedi-vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'tyru/open-browsear.vim'
" Plugin 'bronson/vim-trailing-whitespace'
Plugin 'tpope/vim-speeddating'
Plugin 'kshenoy/vim-signature'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'thinca/vim-quickrun'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'tomasr/molokai'
" Plugin 'justmao945/vim-clang'
" Plugin 'Shougo/neoinclude.vim'
Plugin 'Shougo/vimshell.vim'
Plugin 'xolox/vim-misc'
Plugin 'elzr/vim-json'
Plugin 'ivalkeen/nerdtree-execute'
Plugin 'easymotion/vim-easymotion'
Plugin 'schickling/vim-bufonly'
Plugin 'sk1418/Join'
Plugin 'tpope/vim-surround'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'rdnetto/YCM-Generator'
" Plugin 'nvie/vim-flake8'
Plugin 'juneedahamed/vc.vim'
" Plugin 'SirVer/ultisnips'
" Plugin 'Shougo/neosnippet.vim'
" Plugin 'Shougo/neosnippet-snippets'
Plugin 'honza/vim-snippets'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'stefandtw/quickfix-reflector.vim'
call vundle#end()
filetype plugin indent on

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 1
" let g:airline#extensions#tabline#exclude_preview = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_close_button = 1
if (has('gui_running') || has("unix"))
	let g:airline_powerline_fonts = 1
endif
set laststatus=2		" show status bar

" enable neocomplete
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#auto_completion_start_length = 999
" let g:neocomplete#enable_auto_select = 0
" let g:neocomplete#enable_auto_close_preview = 1
" let g:neocomplete#use_vimproc = 1

" nerd (Ctrl-N)
let NERDTreeChDirMode=0
let g:NERDTreeBookmarksFile=expand("$HOME/.vim/.nerd_bookmarks")
let g:NERDTreeShowBookmarks=1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeIgnore = ['.pyc$']
" let g:NERDTreeWinPos = "right"
nmap <F4> :NERDTreeFind<CR>
imap <F4> <Esc>:NERDTreeFind<CR>i
nmap <C-n> :NERDTreeToggle<CR>
imap <C-n> <Esc>:NERDTreeToggle<CR>i

" close taps
nmap <C-c> :bd<CR>
imap <C-c> <Esc>:bd<CR>i

" unite
nmap <F2> zRzmzm<CR>
imap <F2> <Esc>zRzmzm<CR>i
nmap <F3> zR<CR>
imap <F3> <Esc>zR<CR>i

" fuzzyfinder
" nmap <F3> :FufFileWithFullCwd<CR>
" imap <F3> <Esc>:FufFileWithFullCwd<CR>i
" nmap <F4> :FufFileWithCurrentBufferDir<CR>
" imap <F4> <Esc>:FufFileWithCurrentBufferDir<CR>i

" QuickRun
nmap <F5> :silent !"C:\Mercury\ExcelKill.cmd"<CR>:QuickRun<CR>
imap <F5> <Esc>:silent !"C:\Mercury\ExcelKill.cmd"<CR>:QuickRun<CR>i
let g:quickrun_config = {}
let g:quickrun_config.c = {'command' : 'gcc'}
let g:quickrun_config.cpp = {'command' : 'g++'}
let g:quickrun_config.python = {'command' : 'python'}
" in about:config set set browser.link.open_newwindow=1
let g:quickrun_config.xml = {'command' : '"C:\Program Files (x86)\Mozilla Firefox\firefox.exe"'}

nmap <F8> :silent !"C:\Mercury\ExcelOnce.cmd"<CR>
imap <F8> <Esc>:silent !"C:\Mercury\ExcelOnce.cmd"<CR>i

" move tabs
nmap <C-H> :bprev<CR>
imap <C-H> <Esc>:bprev<CR>i
nmap <C-L> :bnext<CR>
imap <C-L> <Esc>:bnext<CR>i

" jedi (no completation)
let g:jedi#auto_initialization = 1
let g:jedi#popup_on_dot = 0
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<F12>"
let g:jedi#show_call_signatures = "2"

" syntastic (F7)
nmap <F6> :w<CR>:SyntasticCheck<CR>
imap <F6> <Esc>:w<CR>:SyntasticCheck<CR>i
let g:syntastic_python_flake8_exe='python -m flake8'
let g:syntastic_mode_map = { "mode": "passive" }
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_stl_format = '[%E{Error: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args='--select=F,C9 --max-complexity=10'
let g:syntastic_quiet_messages = { "type": "style" }
let g:syntastic_aggregate_errors = 1

" ctrl p
let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_max_files = 10000
let g:ctrlp_working_path_mode = 0
if executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
	let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
	let g:ctrlp_use_caching = 0
endif
if executable('rg')
	set grepprg=rg\ --color=never
	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
	let g:ctrlp_use_caching = 0
endif
set wildignore+=*/.git/*,*/tmp/*,*.swp
" Grep ctrlP

function! RipgrepFzfPython(query, fullscreen)
	let command_fmt = 'rg --type=py --column --line-number --no-heading --color=always --case-sensitive %s'
	let initial_command = printf(command_fmt, shellescape(a:query))
	let reload_command = printf(command_fmt, '{q}')
	let spec = {'options': ['--layout=reverse', '--info=inline', '+i', '--bind', 'change:reload:'.reload_command, '--preview', 'echo {} | cut -d":" -f1 | cut -c2- | xargs head -n20', '--query', a:query]}
	" let spec = {'options': ['--layout=reverse', '--info=inline', '+i', '--bind', 'change:reload:'.reload_command, '--preview', 'echo {} | cut -d: -f1 | cut -c2- | xargs grep -n -C 9 "'.a:query.'" ', '--query', a:query]}
	" let spec = {'options': ['--layout=reverse', '--info=inline', '+i', '--bind', 'change:reload:'.reload_command, '--preview', 'echo {} | cut -d: -f2', '--query', a:query]}
	call fzf#vim#grep(initial_command, 1, spec, a:fullscreen)
endfunction
command! -nargs=* -bang RgPython call RipgrepFzfPython(<q-args>, <bang>0)

function! RipgrepFzfPythonWhole(query, fullscreen)
	let command_fmt = 'rg --type=py -w --column --line-number --no-heading --color=always --case-sensitive %s'
	let initial_command = printf(command_fmt, shellescape(a:query))
	let reload_command = printf(command_fmt, '{q}')
	let spec = {'options': ['--layout=reverse', '--info=inline', '+i', '--bind', 'change:reload:'.reload_command, '--preview', 'echo {} | cut -d":" -f1 | cut -c2- | xargs head -n20', '--query', a:query]}
	call fzf#vim#grep(initial_command, 1, spec, a:fullscreen)
endfunction
command! -nargs=* -bang RgPythonWhole call RipgrepFzfPythonWhole(<q-args>, <bang>0)

command! -bang -nargs=? -complete=dir Files
	\ call fzf#vim#files(<q-args>, {'source': 'rg --files --type=py', 'options': ['--layout=reverse', '--info=inline', '--preview', 'head -n20 {}']}, <bang>0)

nmap <C-f> :Files<CR>
imap <C-f> <Esc>:Files<CR>i
nmap <A-g> :RgPythonWhole <c-r>=expand("<cword>")<CR><CR>
imap <A-g> <Esc>:RgPythonWhole <c-r>=expand("<cword>")<CR><CR>i
nmap <C-g> :RgPython<CR>
imap <C-g> <Esc>:RgPython<CR>i

" neoinclude
" function! GetClangCompleteDirs()
" let cwd = getcwd()
" let current_dir = cwd.",".expand('%:p:h')."/../h".",".expand('%:p:h')
" return current_dir
" endfunction
" let g:neoinclude#paths = { 'cpp': GetClangCompleteDirs() }

"
" let g:clang_dotfile = '.clang_complete'
" let g:clang_cpp_completeopt = 'longest,menuone'
" let g:clang_diagsopt = ''
" if has("unix")
" 	let g:clang_exec = 'clang-3.6'
" 	let g:clang_cpp_options = ' -std=c++14 '
" 	let g:clang_compilation_database = './build/Debug'
" else
" 	let g:clang_exec = 'clang'
" 	let g:clang_cpp_options = ' -std=c++11 '
" 	let g:clang_include_sysheaders_from_gcc = 0
" endif
" 

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" vim.a (alternar entre h y cpp)
let g:alternateNoDefaultAlternate = 1
let g:alternateRelativeFiles = 1
let g:alternateSearchPath = 'sfr:../h,sfr:../..,sfr:../source,sfr:../src,sfr:../include,sfr:../inc'
" nmap <F9> :A<CR>
" imap <F9> <Esc>:A<CR>i
" nmap <F12> :IH<CR>
" imap <F12> <Esc>:IH<CR>i


" " yourcompleteme
" let g:ycm_complete_in_comments=1
" let g:ycm_confirm_extra_conf=0
" let g:ycm_collect_identifiers_from_tags_files=1
" set completeopt-=preview
" let g:ycm_min_num_of_chars_for_completion=1
" let g:ycm_cache_omnifunc=0
" let g:ycm_seed_identifiers_with_syntax=1
" let g:ycm_python_binary_path = '/usr/bin/python3'
" " let g:ycm_python_binary_path = 'python'


" nmap <F12> :YcmCompleter GoTo<CR>
" imap <F12> <Esc>:YcmCompleter GoTo<CR>i

